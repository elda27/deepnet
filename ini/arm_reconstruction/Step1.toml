
[config]
input = [
  "volume"
]

logging = [
  '__train_iteration__', 
  'train.loss_reconstruct', 'valid.loss_reconstruct',
  'train.loss_latent_representation', 'valid.loss_latent_representation',
  'train.loss', 'valid.loss'
]
logging_weights = [
  "", 
  "${hyper_parameter.weight_reconstruct}", "${hyper_parameter.weight_reconstruct}", 
  "${hyper_parameter.weight_lr}", "${hyper_parameter.weight_lr}",
  "", ""
]

archive_nodes = ['CAE']
optimizing_loss = ['loss']

[hyper_parameter]
n_encode_dim = 492
n_layers = 3
gaussian_sigma = 20
n_res_layers = 4

weight_reconstruct = 1.0
weight_lr = 1e4

[[process]]
label  = "CAE"
type   = "network.cae"
update = "loss"

# Arguments
n_dim = 3
in_out_channel = 1
encode_dim = "${hyper_parameter.n_encode_dim}"
dropout = "dropout"
use_batch_norm = true
n_layers = "${hyper_parameter.n_layers}"
latent_activation = true # For sparse penalty

# Network declaration
## Data augmentation
[[network]]
input=["volume"]
process='random_transform'
output=["volume_aug"]

mode = "volume"
rotation    = 10
translation = 0
zoom        = 0
intensity   = 0

[[network]]
input="volume_aug"
process="expand_dims"
output="volume_aug_expanded"
axis=1

[[network]]
input=["volume_aug_expanded"]
process="to_gpu"
output=["gpu_volume"]

## Apply gaussian noise
[[network]]
input = "gpu_volume"
process = "apply_gaussian_noise"
output = "gpu_noisy_volume"

sigma = "${hyper_parameter.gaussian_sigma}"

## Reconstruct label
[[network]]
input="gpu_noisy_volume"
label="CAE"
process="CAE"
output="gpu_reconstruct_volume"

[[network]]
input=[ "gpu_volume", "gpu_reconstruct_volume" ]
process="loss.euclidean_distance"
output="loss_reconstruct"
test=false

[[network]]
input="gpu_reconstruct_volume"
process="get_latent_representation"
output="gpu_latent_representation"
source="CAE.encoder"
test=false

[[network]]
input="gpu_latent_representation"
process="loss.penalty_sparse_encoding"
output="loss_latent_representation"
rho = 0.05
test=false

[[network]]
input = ["loss_reconstruct", "loss_latent_representation"]
process = "reduce"
operation="+"
output = "loss"
weights = ["${hyper_parameter.weight_reconstruct}", "${hyper_parameter.weight_lr}"]
test=false

[[network]]
input = ["gpu_reconstruct_volume", "gpu_volume"]
process= "diff_image"
output = "diff_volume"
train = false
test = false
absolute = true

# Visualize declaration
[[visualize]]
type  = "image_write"
image_names = [ 
  "diff_volume", "gpu_reconstruct_volume", "gpu_volume" 
  ]
output_filename = '${visualize_dir}/{__train_iteration__:08d}_{__name__}_{__index__}.mhd'
num_images = 3

# [[visualize]]
# type = "tile_image_visualizer"
# output_filename = "${visualize_dir}/{__train_iteration__:08d}_tile.png"
# tile_shape = [3, 3]
# block_images =  [ 
#     "roll_volume_drr_image", "pitch_volume_drr_image", "yaw_volume_drr_image",
#     "roll_reconstruct_volume_drr_image", "pitch_reconstruct_volume_drr_image", "yaw_reconstruct_volume_drr_image"
#   ]
# block_shape = [2, 3]

