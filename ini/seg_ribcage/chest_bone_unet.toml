
[config]
input = [
  'image', 'body_bone_image'
]

logging = [
  '__train_iteration__', 'train.loss_xentropy', 'valid.loss_xentropy'
]

archive_nodes = ['Predictor']
optimizing_loss = ['loss_xentropy']

[hyper_parameter]
n_input_channel = 1
n_class = 1
threshold = 0.015

[[process]]
label  = "Predictor"
type   = "network.U-net"
update = "loss_xentropy"

in_channel = "${hyper_parameter.n_input_channel}"
out_channel = "${hyper_parameter.n_class}"


# Network declaration
[[network]]
input   = "body_bone_image"
process = "binary"
output  = "label"

threshold = "${hyper_parameter.threshold}"

[[network]]
input=["image", "label"]
process="to_gpu"
output=["gpu_image_tmp", "gpu_label_tmp"]

# Input image is two dimensional but the shape of image must be (N, C, H, W).
# (N is batch size and will automatically concatenate on to_gpu)
[[network]]
input="gpu_image_tmp"
output="gpu_image"
process="chainer.expand_dims"
axis=1

# Input image and predicted label are same shape due to sigmoid cross entropy.
# If you want to use softmax cross entropy, remove this section.
[[network]]
input="gpu_label_tmp"
output="gpu_label"
process="chainer.expand_dims"
axis=1

# Predict label by unet
[[network]]
input="gpu_image"
label="Predictor"
process="Predictor"
output="gpu_raw_pred_label"

## Losses
[[network]]
input=[ "gpu_raw_pred_label", "gpu_label" ]
process="chainer.sigmoid_cross_entropy"
output="loss_xentropy"
normalize=false

# Network for visualization
## Normalize pred label
[[network]]
input   = "gpu_raw_pred_label"
#process = "chainer.softmax"
process = "chainer.sigmoid"
output  = "gpu_pred_label"

## Index to Color label
[[network]]
input   = "gpu_label"
process = "map_index_label"
output  = "gpu_color_label"

[[network]]
input   = "gpu_pred_label"
process = "make_overlap_label"
output  = "gpu_color_pred_label"

## Expand label for visualization
# [[network]]
# input = "gpu_label"
# process = "chainer.expand_dims"
# axis = 1
# output = "gpu_label_4d"

## Blend DRR and label images.
[[network]]
input = ["gpu_image", "gpu_color_label", "gpu_image", "gpu_color_pred_label"]
process = "blend_image"
output = ["gpu_blend_label", "gpu_blend_pred_label"]

# Visualize declaration
[[visualize]]
type  = "image_write"
image_names = [ 
  "gpu_image", "body_bone_image", 
  "gpu_pred_label", "gpu_label" 
  ]
output_filename = '${visualize_dir}/{__train_iteration__:08d}_{__name__}_{__index__}.mhd'
num_images = 3

[[visualize]]
type = "tile_image_visualizer"
output_filename = "${visualize_dir}/{__train_iteration__:08d}_tile.png"
tile_shape = [5, 5]
block_images =  [ 
  'gpu_image', 'gpu_label', 'gpu_blend_label',
  'gpu_image', 'gpu_pred_label', 'gpu_blend_pred_label'
  ]
block_shape = [2, 3]

