
[config]
input = [
  "projections", "vertices", "faces"
]

logging = [
  '__train_iteration__', 
  'train.loss', 'valid.loss'
]

archive_loss = 'loss'
archive_nodes = ['AE', 'Segnet']
optimizing_loss = ['loss']
freezing_layer = [ 'AE.encoder' ]

[hyper_parameter]
n_encode_dim = 512
n_layers = 16
gaussian_sigma = 20
n_points = 5001

[[process]]
label  = "AE"
type   = "network.ae"
update = "loss"

# Arguments
encode_dim = "${hyper_parameter.n_encode_dim}"
output_dim=15003
dropout = "dropout"
use_batch_norm = true
n_layers = "${hyper_parameter.n_layers}"

[[process]]
label="Segnet"
type="network.cae.encoder"
update="loss"
n_dim=2
in_channel=2
n_layers=4
n_res_layers=3
dropout="dropout"
encode_dim="${hyper_parameter.n_encode_dim}"


[[initialize]]
mode = "load"
name = "AE"
from_step = 1

# Network declaration
[[network]]
input=["vertices", "projections"]
process="to_gpu"
output=["gpu_vertices", "gpu_projections"]

## Apply gaussian noise
[[network]]
input = "gpu_vertices"
process = "apply_gaussian_noise"
output = "gpu_noisy_vertices"

sigma = "${hyper_parameter.gaussian_sigma}"

## Reconstruct label
[[network]]
input="gpu_vertices"
process="batch_reshape"
output="gpu_flatten_vertices"
shape=[-1]

[[network]]
input="gpu_projections"
label="Segnet"
process="Segnet"
output="latent_vector"

[[network]]
input="latent_vector"
label="AE"
process="AE.decoder"
output="gpu_reconstruct_vertices"

[[network]]
input=[ "gpu_vertices", "gpu_reconstruct_vertices" ]
process="loss.euclidean_distance"
output="loss"
test=false

[[network]]
input="gpu_reconstruct_vertices"
process="batch_reshape"
output="gpu_reconstruct_vertices_reformed"
shape=["${n_points}", "-1"]


# Visualize declaration
[[visualize]]
type  = "ply_write"
names = [
  "truth", "reconstruct"
]
vertices_names = [ 
  "gpu_vertices", "gpu_reconstruct_vertices_reformed" ,
]
faces_names= [
  "faces", "faces"
]
output_filename = '${visualize_dir}/{__train_iteration__:08d}_{__name__}_{__index__}.mhd'
num_surfaces = 3

[[visualize]]
type  = "image_write"
image_names = [ 
  "gpu_projections"
  ]
spacing = "projections_spacing"
output_filename = '${visualize_dir}/{__train_iteration__:08d}_{__case_name__}_{__name__}_{__index__}.mhd'
num_images = 3
