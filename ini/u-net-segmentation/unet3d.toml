
[config]
input = [
  'image', 'label'
]

logging = [
  '__train_iteration__', 
  'train.loss_unet', 'valid.loss_unet'
]

archive_nodes = ['Predictor']
optimizing_loss = ['loss_unet']

[hyper_parameter]
n_input_channel = 1
n_class = 3

[[process]]
label  = "Predictor"
type   = "network.U-net"
update = "loss_unet"
n_dims = 3
n_layers = 2

in_channel = "${hyper_parameter.n_input_channel}"
out_channel = "${hyper_parameter.n_class}"

is_bayesian = true
#batch_norm = true

# Network declaration
## Make body bone label

## Input image is two dimensional but the shape of image must be (N, C, H, W).
## (N is batch size and will automatically concatenate on to_gpu)
[[network]]
input=  ["image"]
process="expand_dims"
output= ["image_expanded"]
axis=1

[[network]]
input=["image_expanded"]
process="to_gpu"
output=["gpu_image"]

[[network]]
input=["label"]
process="to_gpu"
output=["gpu_label"]

## Predict label by unet
[[network]]
input="gpu_image"
label="Predictor"
process="Predictor"
output="gpu_raw_pred_label"

## Losses
[[network]]
input  ="gpu_label"
process="cast_type"
dtype='int32'
output ="i_gpu_label"

[[network]]
input=[ "gpu_raw_pred_label", "i_gpu_label" ]
process="chainer.softmax_cross_entropy"
output="loss_unet"
normalize=false
test=false

## Activated pred label
[[network]]
input   = "gpu_raw_pred_label"
process = "chainer.softmax"
output  = "gpu_pred_softmax_label"
train = false

[[network]]
input="gpu_pred_softmax_label"
process="chainer.argmax"
output="gpu_pred_label"
axis=1


# Visualize declaration
[[visualize]]
type  = "image_write"
image_names = [ 
  "gpu_image", "gpu_pred_softmax_label",
  "gpu_pred_label", "gpu_label" 
  ]
output_filename = '${visualize_dir}/{__train_iteration__:08d}_{__name__}_{__index__}.mhd'
num_images = 3
