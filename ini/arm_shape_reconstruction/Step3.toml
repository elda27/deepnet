
[config]
input = [
  "projections",
  "projections_spacing",
  "label",
  "label_spacing"
]

logging = [
  '__train_iteration__',
  'train.loss_label', 'valid.loss_label',
  'train.loss_latent_representation', 'valid.loss_latent_representation',
  'train.loss', 'valid.loss'
]
logging_weights = [
  "",
  "${hyper_parameter.weight_reconstruct}", "${hyper_parameter.weight_reconstruct}",
  "${hyper_parameter.weight_latent_representation}", "${hyper_parameter.weight_latent_representation}",
  "", ""
]

archive_loss = 'loss'
archive_nodes = ['Segnet']
optimizing_loss = ['loss']
freezing_layer = [ 'CAE_label.encoder' ]

[hyper_parameter]
n_encode_dim = 512
n_layers = 3
gaussian_sigma = 0.2
n_res_layers = 4

weight_reconstruct = 1.0
weight_latent_representation = 1e3

[[process]]
label  = "CAE_label"
type   = "network.cae"

# Arguments
n_dim = 3
in_channel = 4
out_channel = 4
encode_dim = "${hyper_parameter.n_encode_dim}"
dropout = "dropout"
use_batch_norm = true
n_layers = "${hyper_parameter.n_layers}"
latent_activation = false # For sparse penalty

[[process]]
label = "Segnet"
type = "network.tl-net.segnet"
update = "loss"

decoder = "CAE_label.decoder"

n_dim = 2
output_shape = [64, 64, 64]

in_channel = 2

[[initialize]]
mode = "load"
name = "CAE_label"
from_step = 1

[[initialize]]
mode = "load"
name = "Segnet"
from_step = 2

# Network declaration
[[network]]
input = "projections"
process = "to_gpu"
output = "gpu_projections"

[[network]]
input = ["projections", "label"]
process = "to_gpu"
output = ["gpu_projections", "gpu_f_label"]

[[network]]
input="gpu_f_label"
process="cast_type"
dtype='int32'
output="gpu_label"

[[network]]
input = "gpu_label"
process= "label_to_probability"
output = "gpu_label_probs"

n_channel = 4

[[network]]
input="gpu_projections"
process = "Segnet"
label   = "Segnet"
output  = "gpu_reconstruct_label_probs"

# Loss calculation
[[network]]
input=[ "gpu_reconstruct_label_probs", "gpu_label" ]
process="chainer.softmax_cross_entropy"
output="loss_label"
test=false

[[network]]
input = "gpu_reconstruct_label_softmax_probs"
process = "CAE_label.encoder"
output = "gpu_reconstruct_latent"

[[network]]
input = "gpu_label_probs"
process = "CAE_label.encoder"
output = "gpu_truth_latent"

[[network]]
input = ["gpu_reconstruct_latent", "gpu_truth_latent"]
process = "loss.euclidean_distance"
output = "loss_latent_representation"

[[network]]
input = ["loss_label", "loss_latent_representation"]
process = "reduce"
operation="+"
output = "loss"
weights = [
    "${hyper_parameter.weight_reconstruct}",
    "${hyper_parameter.weight_latent_representation}"
]
test=false

# For visualization
[[network]]
input="gpu_reconstruct_label_probs"
process="chainer.softmax"
output="gpu_reconstruct_label_softmax_probs"

[[network]]
input="gpu_reconstruct_label_softmax_probs"
process="chainer.argmax"
output="gpu_reconstruct_label"
axis=1

# Visualize declaration
[[visualize]]
type  = "image_write"
image_names = [
  "gpu_label", "gpu_reconstruct_label"
]
spacing = "spacing"
output_filename = '${visualize_dir}/{__train_iteration__:08d}_{__case_name__}_{__name__}_{__index__}.mhd'
num_images = 3

[[visualize]]
type  = "image_write"
image_names = [
  "gpu_projections"
  ]
spacing = "projections_spacing"
output_filename = '${visualize_dir}/{__train_iteration__:08d}_{__case_name__}_{__name__}_{__index__}.mhd'
num_images = 3

