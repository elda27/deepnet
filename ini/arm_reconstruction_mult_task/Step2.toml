
[config]
input = [
  "volume",
  "spacing",
  "label",
  "projections",
  "projections_spacing"
]

logging = [
  '__train_iteration__', 
  'train.loss_reconstruct_volume', 'valid.loss_reconstruct_volume',
  'train.loss_reconstruct_label', 'valid.loss_reconstruct_label',
  'train.loss', 'valid.loss'
]
logging_weights = [
  "", 
  "multi_task_combine.sigma_0", "multi_task_combine.sigma_0", 
  "multi_task_combine.sigma_1", "multi_task_combine.sigma_1", 
  "", ""
]

archive_loss = 'loss'
archive_nodes = ['Segnet']
optimizing_loss = ['loss']
freezing_layer = [ 'Segnet.decoder1', 'Segnet.decoder2' ]

[hyper_parameter]
n_encode_dim = 512
n_layers = 3
n_res_layers = 4

weight_reconstruct = 1.0

# In order to load the model.
[[process]]
label  = "CAE"
type   = "network.cae"

## Arguments
n_dim = 3
n_task = 2
in_channel = 5
out_channel = [1, 4]
encode_dim = "${hyper_parameter.n_encode_dim}"
dropout = "dropout"
use_batch_norm = true
n_layers = "${hyper_parameter.n_layers}"
latent_activation = true # For sparse penalty

[[process]]
label = "Segnet"
type = "network.tl-net.segnet"
update = "loss"

decoder = [ "CAE.decoder1", "CAE.decoder2" ]

n_dim = 2
output_shape = [64, 64, 64]

in_channel = 2

[[process]]
label="multi_task_combine"
loss_types=["euclidean", "softmax_cross_entropy"]
initialize=[10.0, 1.6] # this weight will be reciprocal squared value.
type   = "network.multi_task_loss"

[[initialize]]
mode = "load"
name = "CAE"
from_step = 1

[[initialize]]
mode = "share"
from = "CAE.decoder1"
to = "Segnet.decoder1"

[[initialize]]
mode = "share"
from = "CAE.decoder2"
to = "Segnet.decoder2"

# Network declaration
[[network]]
input = "projections"
process = "to_gpu"
output = "gpu_rendering_image"

[[network]]
input = "volume"
process = "expand_dims"
axis = 1
output = "volume_expanded"

[[network]]
input=["volume_expanded", "label"]
process="to_gpu"
output=["gpu_volume", "gpu_label"]

[[network]]
input="gpu_rendering_image"
process = "Segnet"
label   = "Segnet"
output  = ["gpu_reconstruct_volume", "gpu_reconstruct_probs"]

[[network]]
input=[ "gpu_volume", "gpu_reconstruct_volume" ]
process="loss.euclidean_distance"
output ="loss_euclidean"
test=false


[[network]]
input=[ "gpu_reconstruct_probs", "gpu_label" ]
process="chainer.softmax_cross_entropy"
output="loss_reconstruct_label"

[[network]]
input=["loss_reconstruct_volume", "loss_reconstruct_label"]
process="multi_task_combine"
output="loss"

[[network]]
input='gpu_reconstruct_probs'
process='chainer.softmax'
output='gpu_reconstruct_label'

[[network]]
input = ["gpu_reconstruct_volume", "gpu_volume"]
process= "diff_image"
output = "diff_volume"
train = false
test = false
absolute = true

# Visualize declaration
[[visualize]]
type  = "image_write"
image_names = [ 
  "volume", "diff_volume", "gpu_reconstruct_volume", "gpu_volume"
  ]
spacing = "spacing"
output_filename = '${visualize_dir}/{__train_iteration__:08d}_{__case_name__}_{__name__}_{__index__}.mhd'
num_images = 3

[[visualize]]
type  = "image_write"
image_names = [ 
  "gpu_rendering_image"
  ]
spacing = "projections_spacing"
output_filename = '${visualize_dir}/{__train_iteration__:08d}_{__case_name__}_{__name__}_{__index__}.mhd'
num_images = 3

